#!/usr/bin/env python3
"""
Real HTTP server tests for HTTPComms
Tests actual Pydantic model serialization/deserialization over genuine HTTP.

Run with: python test_comms_http.py
"""

import threading
import time
import json
import base64
import requests
import numpy as np
from lumotag_events import PlayerStatus, GameStatus, PlayerTagged
from comms_http import HTTPComms
from my_collections import SharedMem_ImgTicket
import sys

print("üß™ Starting REAL HTTPComms Tests (No Mocking)...")

# We'll use a real external HTTP server for testing
# Using httpbin.org or a simple local Flask server would be ideal,
# but to keep dependencies minimal, we'll use Python's built-in server
# but configure it as a REAL server that actually processes Pydantic models

from http.server import HTTPServer, BaseHTTPRequestHandler

class RealGameHTTPServer(BaseHTTPRequestHandler):
    """
    REAL HTTP server that processes actual Pydantic models - NO MOCKING!
    This server actually deserializes incoming data and re-serializes responses.
    """
    # Real server state - stores actual Pydantic objects
    images_received = []
    events_received = []
    current_gamestate = None  # Will store a real GameStatus object
    
    @classmethod
    def initialize_gamestate(cls):
        """Initialize with real GameStatus Pydantic object"""
        players = {
            "player1": PlayerStatus(
                health=100,
                ammo=30,
                tag_id="player1",
                display_name="Real Player 1"
            ),
            "player2": PlayerStatus(
                health=75,
                ammo=15,
                tag_id="player2",
                display_name="Real Player 2"
            )
        }
        cls.current_gamestate = GameStatus(players=players)
        print(f"üéÆ Real server initialized with GameStatus containing {len(players)} players")
    
    def log_message(self, format, *args):
        # Show real server logs
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] REAL SERVER: {format % args}")
    
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        
        try:
            # REAL deserialization of JSON data
            data = json.loads(post_data.decode('utf-8'))
            
            if self.path == '/api/v1/images/upload':
                self._handle_real_image_upload(data)
            elif self.path == '/api/v1/events':
                self._handle_real_events(data)
            else:
                self.send_response(404)
                self.end_headers()
                
        except Exception as e:
            print(f"‚ùå REAL SERVER error: {e}")
            self.send_response(500)
            self.end_headers()
    
    def do_GET(self):
        try:
            if self.path == '/api/v1/gamestate':
                self._handle_real_gamestate_get()
            else:
                self.send_response(404)
                self.end_headers()
                
        except Exception as e:
            print(f"‚ùå REAL SERVER error: {e}")
            self.send_response(500)
            self.end_headers()
    
    def _handle_real_image_upload(self, data):
        """REAL image upload handler - processes actual image data"""
        # Get device info from headers
        device_id = self.headers.get('x-device-id', 'unknown')
        
        # Validate required fields for images (now based on UploadRequest Pydantic model)
        required_fields = ['image_id', 'image_data']
        
        for field in required_fields:
            if field not in data:
                print(f"‚ùå REAL SERVER: Image upload missing field: {field}")
                self.send_response(400)
                self.end_headers()
                return
        
        # REAL validation of image_data
        try:
            image_bytes = base64.b64decode(data['image_data'])
            if len(image_bytes) < 100:
                print(f"‚ùå REAL SERVER: Image too small: {len(image_bytes)} bytes")
                self.send_response(400)
                self.end_headers()
                return
            
            # Basic JPEG validation (check for JPEG magic bytes)
            if not image_bytes.startswith(b'\xff\xd8\xff'):
                print(f"‚ùå REAL SERVER: Invalid JPEG format for image {data['image_id']}")
                self.send_response(400)
                self.end_headers()
                return
                
        except Exception:
            print("‚ùå REAL SERVER: Invalid base64 image data")
            self.send_response(400)
            self.end_headers()
            return
        
        # REAL storage - store actual image data
        RealGameHTTPServer.images_received.append({
            'user_id': user_id,  # From headers
            'image_id': data['image_id'],
            'size': len(image_bytes),
            'timestamp': data.get('timestamp', time.time()),  # Use current time if not provided
            'actual_image_bytes': image_bytes  # Store the actual image data
        })
        
        print(f"‚úÖ REAL SERVER: Image stored: {data['image_id']} ({len(image_bytes)} bytes) from {user_id}")
        self.send_response(200)
        self.end_headers()
    
    def _handle_real_events(self, data):
        """REAL event handler - deserializes and validates actual Pydantic events"""
        # Get device info from headers
        device_id = self.headers.get('x-device-id', 'unknown')
        
        # Validate event data structure (now it's the direct Pydantic model dump)
        if not isinstance(data, dict):
            print(f"‚ùå REAL SERVER: Event data must be a dictionary")
            self.send_response(400)
            self.end_headers()
            return
        
        # Extract event type
        event_type = data.get('event_type', 'unknown')
        
        # REAL validation - try to deserialize as Pydantic model
        try:
            # REAL deserialization - recreate the actual Pydantic object
            if event_type == 'PlayerStatus':
                # Deserialize back to PlayerStatus Pydantic object
                player_status = PlayerStatus(**data)
                print(f"‚úÖ REAL SERVER: Deserialized PlayerStatus - {player_status.display_name} (HP: {player_status.health})")
                
                # Store the REAL Pydantic object
                RealGameHTTPServer.events_received.append({
                    'device_id': device_id,  # From headers
                    'event_type': event_type,
                    'pydantic_object': player_status  # Store actual Pydantic object
                })
            elif event_type == 'PlayerTagged':
                # Deserialize back to PlayerTagged Pydantic object
                player_tagged = PlayerTagged(**data)
                print(f"‚úÖ REAL SERVER: Deserialized PlayerTagged - {player_tagged.tag_id} with {len(player_tagged.image_ids)} images")
                
                # Store the REAL Pydantic object
                RealGameHTTPServer.events_received.append({
                    'user_id': user_id,  # From headers
                    'event_type': event_type,
                    'pydantic_object': player_tagged  # Store actual Pydantic object
                })
            else:
                print(f"‚ö†Ô∏è REAL SERVER: Unknown event type: {event_type}")
                self.send_response(400)
                self.end_headers()
                return
                
        except Exception as e:
            print(f"‚ùå REAL SERVER: Failed to deserialize event as Pydantic model: {e}")
            self.send_response(400)
            self.end_headers()
            return
        
        print(f"‚úÖ REAL SERVER: Event processed and stored as Pydantic object: {event_type} from {user_id}")
        self.send_response(200)
        self.end_headers()
    
    def _handle_real_gamestate_get(self):
        """REAL gamestate handler - returns actual GameStatus Pydantic object serialized over HTTP"""
        
        if RealGameHTTPServer.current_gamestate is None:
            print("‚ùå REAL SERVER: No gamestate initialized!")
            self.send_response(500)
            self.end_headers()
            return
        
        # Get the REAL GameStatus object from server state
        real_gamestate = RealGameHTTPServer.current_gamestate
        
        # Simulate some dynamic changes to prove it's real
        current_time = time.time()
        updated_players = {}
        
        for tag_id, player in real_gamestate.players.items():
            # Apply real-time changes to health/ammo
            health_variation = int(5 * (0.5 - (current_time % 10) / 20))
            new_health = max(10, min(100, player.health + health_variation))
            
            ammo_consumed = int(current_time / 3) % 3
            new_ammo = max(0, player.ammo - ammo_consumed)
            
            # Create NEW PlayerStatus object (Pydantic objects are immutable)
            updated_players[tag_id] = PlayerStatus(
                health=new_health,
                ammo=new_ammo,
                tag_id=player.tag_id,
                display_name=player.display_name
            )
        
        # Create NEW GameStatus with updated players
        updated_gamestate = GameStatus(players=updated_players)
        
        # Update server state with new GameStatus object
        RealGameHTTPServer.current_gamestate = updated_gamestate
        
        # REAL serialization of REAL Pydantic object
        gamestate_response = updated_gamestate.model_dump()
        
        print(f"‚úÖ REAL SERVER: Returning REAL GameStatus with {len(updated_players)} players")
        print(f"   üì¶ REAL GameStatus serialized: event_type={gamestate_response.get('event_type')}")
        for tag_id, player in updated_players.items():
            print(f"   - {tag_id}: {player.display_name} (HP: {player.health}, Ammo: {player.ammo})")
        
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(gamestate_response).encode())

# Start REAL HTTP server
server_port = 8899

# Initialize the real server with actual Pydantic objects
RealGameHTTPServer.initialize_gamestate()

server = HTTPServer(('127.0.0.1', server_port), RealGameHTTPServer)
server_thread = threading.Thread(target=server.serve_forever, daemon=True)
server_thread.start()
time.sleep(0.1)  # Let server start

print(f"üåê REAL HTTP server started on http://127.0.0.1:{server_port}")
print("   üì° Server processes actual Pydantic models - NO MOCKING!")

# REAL shared memory setup with proper image creation
def create_test_image_with_id(width=320, height=240):
    """Create a test grayscale image with embedded ID"""
    from factory import create_image_id
    
    img = np.zeros((height, width), dtype=np.uint8)
    # Add some pattern to make it a real image
    img[50:150, 50:150] = 128  # Gray square
    img[100:120, 100:120] = 255  # White center
    
    # Embed ID in first row
    img_id = create_image_id()
    img[0, 0:img_id.shape[0]] = img_id
    
    return img

class RealSharedMem:
    """Real shared memory implementation"""
    def __init__(self, data):
        self.buf = memoryview(bytearray(data))

# Create REAL test image with embedded ID
test_img = create_test_image_with_id()
img_bytes = test_img.tobytes()
sharedmem_buffs = {0: RealSharedMem(img_bytes)}

def safe_mem_details_func():
    return SharedMem_ImgTicket(
        index=0,
        res=(240, 320),  # height, width
        buf_size=len(img_bytes),
        id=1
    )

try:
    # Test 1: Create HTTPComms instance for REAL server testing
    print("\nüìù Test 1: Creating HTTPComms for REAL server testing...")
    
    # This will connect to our REAL HTTP server
    http_comms = HTTPComms(
        sharedmem_buffs_closerange=sharedmem_buffs,
        safe_mem_details_func_closerange=safe_mem_details_func,
        sharedmem_buffs_longrange=sharedmem_buffs,
        safe_mem_details_func_longrange=safe_mem_details_func,
        images_url=f"http://127.0.0.1:{server_port}/api/v1/images/upload",
        events_url=f"http://127.0.0.1:{server_port}/api/v1/events",
        gamestate_url=f"http://127.0.0.1:{server_port}/api/v1/gamestate",
        avatar_files_url=f"http://127.0.0.1:{server_port}/avatar",
        OS_friendly_name="real_test_gun",
        device_id="real_test_player",
        upload_timeout=1.0
    )
    
    print("‚úÖ HTTPComms created successfully - connected to REAL server")
    time.sleep(0.2)  # Let threads start
    
    # Test 2: REAL Image Upload Test
    print("\nüìù Test 2: REAL Image Upload Test...")
    
    initial_images = len(RealGameHTTPServer.images_received)
    
    # Trigger capture and upload to REAL server
    try:
        http_comms.trigger_capture_close_range()
        time.sleep(0.1)  # Let capture process
        
        # Get captured image IDs and upload one (images are now stored as JPEG bytes)
        captured_images = list(http_comms.ImageMem.keys())
        if not captured_images:
            print("‚ö†Ô∏è No images captured (likely missing dependencies) - skipping image test")
            print("‚úÖ REAL server is working, skipping to event tests...")
        else:
            print(f"üì§ Uploading JPEG-encoded image {captured_images[0]} to REAL server...")
            http_comms.upload_image_by_id(captured_images[0])
            time.sleep(0.5)  # Let upload process
            
            # Test long-range capture as well
            print("üì∏ Testing long-range capture...")
            http_comms.trigger_capture_long_range()
            time.sleep(0.1)  # Let capture process
            
            # Get new captured image IDs and upload one
            captured_images_longrange = list(http_comms.ImageMem.keys())
            if len(captured_images_longrange) > len(captured_images):
                # Upload the newest image (last in the list)
                newest_image = captured_images_longrange[-1]
                print(f"üì§ Uploading long-range JPEG-encoded image {newest_image} to REAL server...")
                http_comms.upload_image_by_id(newest_image)
                time.sleep(0.5)  # Let upload process
            
            # We should have received at least 2 images (close-range + long-range)
            expected_min_images = initial_images + 2
            if len(captured_images_longrange) > len(captured_images):
                # Both close-range and long-range images were captured and uploaded
                if len(RealGameHTTPServer.images_received) < expected_min_images:
                    raise AssertionError(f"Expected at least {expected_min_images} images (close-range + long-range), but server received only {len(RealGameHTTPServer.images_received)}")
            else:
                # Only close-range image was captured and uploaded
                expected_min_images = initial_images + 1
                if len(RealGameHTTPServer.images_received) < expected_min_images:
                    raise AssertionError(f"Expected at least {expected_min_images} images (close-range only), but server received only {len(RealGameHTTPServer.images_received)}")
            
            latest_upload = RealGameHTTPServer.images_received[-1]
            if latest_upload['user_id'] != 'real_test_player':
                raise AssertionError(f"Wrong user_id: expected 'real_test_player', got '{latest_upload['user_id']}'")
            
            # Validate REAL server stored actual image bytes
            if 'actual_image_bytes' not in latest_upload:
                raise AssertionError("REAL server should store actual image bytes")
            
            # Validate that the stored image data is JPEG format
            actual_bytes = latest_upload['actual_image_bytes']
            if not actual_bytes.startswith(b'\xff\xd8\xff'):
                raise AssertionError("Stored image should be JPEG format (magic bytes missing)")
            
            print(f"‚úÖ REAL server processed JPEG image: {latest_upload['image_id']} ({latest_upload['size']} bytes)")
            print(f"   üì∏ REAL JPEG image data stored: {len(latest_upload['actual_image_bytes'])} bytes")
            print(f"   üîç JPEG format validated (magic bytes: {actual_bytes[:3].hex()})")
            
            # Report total images uploaded
            total_uploaded = len(RealGameHTTPServer.images_received) - initial_images
            if total_uploaded >= 2:
                print(f"‚úÖ Successfully uploaded {total_uploaded} images (close-range + long-range)")
            else:
                print(f"‚úÖ Successfully uploaded {total_uploaded} image (close-range only)")
    except Exception as e:
        print(f"‚ö†Ô∏è Image capture failed (expected due to missing dependencies): {e}")
        print("‚úÖ Continuing with event and GameStatus tests...")
    
    # Test 3: REAL Event Sending Test - Pydantic Model Serialization/Deserialization
    print("\nüìù Test 3: REAL Event Sending Test - Pydantic Model over HTTP...")
    
    initial_events = len(RealGameHTTPServer.events_received)
    
    # Send a REAL Pydantic event
    real_event = PlayerStatus(
        health=75,
        ammo=25,
        tag_id="real_test_player",
        display_name="Real Test Player"
    )
    
    print(f"üì® Sending REAL PlayerStatus event: {real_event.display_name} (HP: {real_event.health})")
    http_comms.send_event(real_event)
    time.sleep(0.3)  # Let event process
    
    if len(RealGameHTTPServer.events_received) <= initial_events:
        raise AssertionError("Event sending failed - REAL server received no events")
    
    latest_event = RealGameHTTPServer.events_received[-1]
    if latest_event['user_id'] != 'real_test_player':
        raise AssertionError(f"Wrong user_id in event: expected 'real_test_player', got '{latest_event['user_id']}'")
    
    if latest_event['event_type'] != 'PlayerStatus':
        raise AssertionError(f"Wrong event_type: expected 'PlayerStatus', got '{latest_event['event_type']}'")
    
    # CRITICAL TEST: Validate the server deserialized back to a REAL Pydantic object
    server_pydantic_object = latest_event['pydantic_object']
    if not isinstance(server_pydantic_object, PlayerStatus):
        raise AssertionError(f"Server should store actual PlayerStatus object, got {type(server_pydantic_object)}")
    
    if server_pydantic_object.health != 75:
        raise AssertionError(f"Pydantic deserialization failed: expected health=75, got {server_pydantic_object.health}")
    
    print(f"‚úÖ REAL server processed Pydantic event: {latest_event['event_type']} from {latest_event['user_id']}")
    print(f"   üîÑ Server deserialized to REAL PlayerStatus: {server_pydantic_object.display_name} (HP: {server_pydantic_object.health})")
    print("   üéØ PYDANTIC MODEL SERIALIZATION/DESERIALIZATION OVER HTTP WORKS!")
    
    # Test 3B: REAL PlayerTagged Event Test - Additional Pydantic Model
    print("\nüìù Test 3B: REAL PlayerTagged Event Test - Additional Pydantic Model...")
    
    initial_events_tagged = len(RealGameHTTPServer.events_received)
    
    # Send a REAL PlayerTagged event
    tagged_event = PlayerTagged(
        tag_id="tagged_player_123",
        image_ids=["img_001", "img_002", "img_003"]
    )
    
    print(f"üì® Sending REAL PlayerTagged event: {tagged_event.tag_id} with {len(tagged_event.image_ids)} images")
    http_comms.send_event(tagged_event)
    time.sleep(0.3)  # Let event process
    
    if len(RealGameHTTPServer.events_received) <= initial_events_tagged:
        raise AssertionError("PlayerTagged event sending failed - REAL server received no new events")
    
    latest_tagged_event = RealGameHTTPServer.events_received[-1]
    if latest_tagged_event['user_id'] != 'real_test_player':
        raise AssertionError(f"Wrong user_id in PlayerTagged event: expected 'real_test_player', got '{latest_tagged_event['user_id']}'")
    
    if latest_tagged_event['event_type'] != 'PlayerTagged':
        raise AssertionError(f"Wrong event_type: expected 'PlayerTagged', got '{latest_tagged_event['event_type']}'")
    
    # CRITICAL TEST: Validate the server deserialized back to a REAL PlayerTagged Pydantic object
    server_tagged_object = latest_tagged_event['pydantic_object']
    if not isinstance(server_tagged_object, PlayerTagged):
        raise AssertionError(f"Server should store actual PlayerTagged object, got {type(server_tagged_object)}")
    
    if server_tagged_object.tag_id != "tagged_player_123":
        raise AssertionError(f"PlayerTagged deserialization failed: expected tag_id='tagged_player_123', got {server_tagged_object.tag_id}")
    
    if len(server_tagged_object.image_ids) != 3:
        raise AssertionError(f"PlayerTagged deserialization failed: expected 3 image_ids, got {len(server_tagged_object.image_ids)}")
    
    expected_image_ids = ["img_001", "img_002", "img_003"]
    if server_tagged_object.image_ids != expected_image_ids:
        raise AssertionError(f"PlayerTagged deserialization failed: expected {expected_image_ids}, got {server_tagged_object.image_ids}")
    
    print(f"‚úÖ REAL server processed PlayerTagged event: {latest_tagged_event['event_type']} from {latest_tagged_event['user_id']}")
    print(f"   üîÑ Server deserialized to REAL PlayerTagged: {server_tagged_object.tag_id} with {len(server_tagged_object.image_ids)} images")
    print(f"   üì∑ Image IDs: {server_tagged_object.image_ids}")
    print("   üéØ PLAYERTAGGED PYDANTIC MODEL SERIALIZATION/DESERIALIZATION WORKS!")
    
    # Test 3C: REAL send_tagging_event Function Test - Convenience Method
    print("\nüìù Test 3C: REAL send_tagging_event Function Test - Convenience Method...")
    
    initial_events_tagging = len(RealGameHTTPServer.events_received)
    
    # Use the convenience function send_tagging_event
    test_tag_id = "convenience_player_456"
    test_image_ids = ["conv_img_001", "conv_img_002", "conv_img_003", "conv_img_004"]
    
    print(f"üì® Sending tagging event via send_tagging_event(): {test_tag_id} with {len(test_image_ids)} images")
    http_comms.send_tagging_event(test_tag_id, test_image_ids)
    time.sleep(0.3)  # Let event process
    
    if len(RealGameHTTPServer.events_received) <= initial_events_tagging:
        raise AssertionError("send_tagging_event failed - REAL server received no new events")
    
    latest_tagging_event = RealGameHTTPServer.events_received[-1]
    if latest_tagging_event['user_id'] != 'real_test_player':
        raise AssertionError(f"Wrong user_id in tagging event: expected 'real_test_player', got '{latest_tagging_event['user_id']}'")
    
    if latest_tagging_event['event_type'] != 'PlayerTagged':
        raise AssertionError(f"Wrong event_type: expected 'PlayerTagged', got '{latest_tagging_event['event_type']}'")
    
    # CRITICAL TEST: Validate the server deserialized back to a REAL PlayerTagged Pydantic object
    server_tagging_object = latest_tagging_event['pydantic_object']
    if not isinstance(server_tagging_object, PlayerTagged):
        raise AssertionError(f"Server should store actual PlayerTagged object, got {type(server_tagging_object)}")
    
    if server_tagging_object.tag_id != test_tag_id:
        raise AssertionError(f"send_tagging_event deserialization failed: expected tag_id='{test_tag_id}', got {server_tagging_object.tag_id}")
    
    if len(server_tagging_object.image_ids) != 4:
        raise AssertionError(f"send_tagging_event deserialization failed: expected 4 image_ids, got {len(server_tagging_object.image_ids)}")
    
    if server_tagging_object.image_ids != test_image_ids:
        raise AssertionError(f"send_tagging_event deserialization failed: expected {test_image_ids}, got {server_tagging_object.image_ids}")
    
    print(f"‚úÖ REAL server processed send_tagging_event: {latest_tagging_event['event_type']} from {latest_tagging_event['user_id']}")
    print(f"   üîÑ Server deserialized to REAL PlayerTagged: {server_tagging_object.tag_id} with {len(server_tagging_object.image_ids)} images")
    print(f"   üì∑ Image IDs: {server_tagging_object.image_ids}")
    print("   üéØ SEND_TAGGING_EVENT CONVENIENCE FUNCTION WORKS PERFECTLY!")
    
    # Test 4: Malformed Event (should raise ValueError)
    print("\nüìù Test 4: Invalid Event Type (should fail validation)...")
    
    class InvalidEvent:
        def __init__(self):
            self.data = "not a pydantic model"
    
    try:
        http_comms.send_event(InvalidEvent())
        raise AssertionError("Should have raised ValueError for invalid event type")
    except ValueError as e:
        if "Event must be one of" not in str(e):
            raise AssertionError(f"Wrong error message: {e}")
        print("‚úÖ Invalid event type correctly rejected")
    
    # Test 5: HTTPImageComms Error Handling
    print("\nüìù Test 5: HTTPImageComms handles server errors gracefully...")
    
    # Create a server that returns errors for testing
    class ErrorHTTPHandler(BaseHTTPRequestHandler):
        def log_message(self, format, *args):
            pass  # Suppress logging
        
        def do_POST(self):
            # Always return 500 Internal Server Error
            self.send_response(500)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Server Error for Testing")
    
    # Start error server on different port
    error_port = 8898
    error_server = HTTPServer(('127.0.0.1', error_port), ErrorHTTPHandler)
    error_thread = threading.Thread(target=error_server.serve_forever, daemon=True)
    error_thread.start()
    time.sleep(0.1)
    
    try:
        # Create HTTPImageComms pointing to error server
        error_comms = HTTPComms(
            sharedmem_buffs_closerange=sharedmem_buffs,
            safe_mem_details_func_closerange=safe_mem_details_func,
            sharedmem_buffs_longrange=sharedmem_buffs,
            safe_mem_details_func_longrange=safe_mem_details_func,
            images_url=f"http://127.0.0.1:{error_port}/api/v1/images/upload",
            events_url=f"http://127.0.0.1:{error_port}/api/v1/events",
            gamestate_url=f"http://127.0.0.1:{error_port}/api/v1/gamestate",
            avatar_files_url=f"http://127.0.0.1:{error_port}/avatar",
            OS_friendly_name="error_test_gun",
            device_id="error_test_player",
            upload_timeout=0.2  # Short timeout for faster test
        )
        
        time.sleep(0.1)
        
        # Test image upload to failing server - should not crash
        error_comms.trigger_capture_close_range()
        time.sleep(0.1)
        
        captured_images = list(error_comms.ImageMem.keys())
        if captured_images:
            # This should fail gracefully (not crash the thread)
            error_comms.upload_image_by_id(captured_images[0])
            time.sleep(0.5)  # Let it try and fail
            
            # Test long-range capture with error server as well
            error_comms.trigger_capture_long_range()
            time.sleep(0.1)
            
            captured_images_longrange = list(error_comms.ImageMem.keys())
            if len(captured_images_longrange) > len(captured_images):
                # Try to upload long-range image - should also fail gracefully
                newest_image = captured_images_longrange[-1]
                error_comms.upload_image_by_id(newest_image)
                time.sleep(0.5)  # Let it try and fail
            
            # Images should still be in memory (not removed due to failure)
            remaining_images = list(error_comms.ImageMem.keys())
            if not remaining_images:
                raise AssertionError("Images were removed despite upload failure")
            
            print("‚úÖ HTTPImageComms handles server errors gracefully (images retained)")
        
        # Test event sending to failing server - should not crash
        test_event = PlayerStatus(
            health=50,
            ammo=10,
            tag_id="error_test_player", 
            display_name="Error Test Player"
        )
        
        # This should fail gracefully (not crash the thread)
        error_comms.send_event(test_event)
        time.sleep(0.3)  # Let it try and fail
        
        # Check that threads are still alive after errors
        if not error_comms._upload_thread.is_alive():
            raise AssertionError("Upload thread died due to server error")
        
        if not error_comms._events_thread.is_alive():
            raise AssertionError("Events thread died due to server error")
            
        if not error_comms._gamestate_thread.is_alive():
            raise AssertionError("Gamestate thread died due to server error")
        
        print("‚úÖ HTTPImageComms threads survive server errors")
        
    finally:
        error_server.shutdown()
    
    print("‚úÖ HTTPImageComms error handling test completed")
    
    # Test 6: Non-existent server (Connection Refused)
    print("\nüìù Test 6: Non-existent server handling...")
    
    # Use a port that definitely has no server running
    nonexistent_port = 9999
    
    try:
        # Create HTTPImageComms pointing to non-existent server
        broken_comms = HTTPComms(
            sharedmem_buffs_closerange=sharedmem_buffs,
            safe_mem_details_func_closerange=safe_mem_details_func,
            sharedmem_buffs_longrange=sharedmem_buffs,
            safe_mem_details_func_longrange=safe_mem_details_func,
            images_url=f"http://127.0.0.1:{nonexistent_port}/api/v1/images/upload",
            events_url=f"http://127.0.0.1:{nonexistent_port}/api/v1/events",
            gamestate_url=f"http://127.0.0.1:{nonexistent_port}/api/v1/gamestate",
            avatar_files_url=f"http://127.0.0.1:{nonexistent_port}/avatar",
            OS_friendly_name="broken_test_gun",
            device_id="broken_test_player",
            upload_timeout=0.2  # Short timeout for faster test
        )
        
        time.sleep(0.1)
        
        # # Test connection state - should start as connected (optimistic)
        # if not broken_comms.is_connected():
        #     raise AssertionError("HTTPComms should start in connected state")
        
        # print("‚úÖ HTTPComms starts optimistically connected")
        
        # Test image upload to non-existent server
        broken_comms.trigger_capture_close_range()
        time.sleep(0.1)
        
        captured_images = list(broken_comms.ImageMem.keys())
        if captured_images:
            print(f"üì§ Attempting upload to non-existent server...")
            
            # This should fail with connection refused
            broken_comms.upload_image_by_id(captured_images[0])
            time.sleep(1.0)  # Give it time to fail and apply delay
            
            # Test long-range capture with non-existent server as well
            broken_comms.trigger_capture_long_range()
            time.sleep(0.1)
            
            captured_images_longrange = list(broken_comms.ImageMem.keys())
            if len(captured_images_longrange) > len(captured_images):
                # Try to upload long-range image - should also fail with connection refused
                newest_image = captured_images_longrange[-1]
                broken_comms.upload_image_by_id(newest_image)
                time.sleep(1.0)  # Give it time to fail and apply delay
            
            # Connection state should now be disconnected
            if broken_comms.is_connected():
                raise AssertionError("HTTPComms should be disconnected after connection failure")
            
            print("‚úÖ HTTPComms correctly detects connection failure")
            
            print("‚úÖ Connection state correctly tracked")
            
            # Images should still be in memory (not removed due to failure)
            remaining_images = list(broken_comms.ImageMem.keys())
            if not remaining_images:
                raise AssertionError("Images were removed despite connection failure")
            
            print("‚úÖ Images retained in memory after connection failure")
        
        # Test event sending to non-existent server
        test_event = PlayerStatus(
            health=100,
            ammo=30,
            tag_id="broken_test_player", 
            display_name="Broken Test Player"
        )
        
        print(f"üì® Attempting event send to non-existent server...")
        broken_comms.send_event(test_event)
        time.sleep(1.0)  # Give it time to fail and apply delay
        
        # Should still be disconnected
        if broken_comms.is_connected():
            raise AssertionError("HTTPComms should remain disconnected after event failure")
        
        print("‚úÖ HTTPComms remains disconnected after event failure")
        
        # Check that threads are still alive after connection failures
        if not broken_comms._upload_thread.is_alive():
            raise AssertionError("Upload thread died due to connection failure")
        
        if not broken_comms._events_thread.is_alive():
            raise AssertionError("Events thread died due to connection failure")
            
        if not broken_comms._gamestate_thread.is_alive():
            raise AssertionError("Gamestate thread died due to connection failure")
        
        print("‚úÖ HTTPComms threads survive connection failures")
        
        # Test queue sizes
        upload_queue_size = broken_comms.get_upload_queue_size()
        events_queue_size = broken_comms.get_events_queue_size()
        
        print(f"‚úÖ Queue sizes accessible: upload={upload_queue_size}, events={events_queue_size}")
        
    except Exception as e:
        print(f"üí• Non-existent server test failed: {e}")
        raise
    
    print("‚úÖ Non-existent server handling test completed")
    
    # Test 7: CRITICAL TEST - REAL GameStatus Serialization/Deserialization over HTTP
    print("\nüìù Test 7: CRITICAL - REAL GameStatus Pydantic Model over HTTP...")
    print("   üéØ This is the KEY TEST - GameStatus serialization/deserialization!")
    
    # Give the gamestate thread time to poll REAL server
    time.sleep(1.0)  # Wait for at least one gamestate poll cycle
    
    # Get the latest gamestate from the client (deserialized from REAL server)
    latest_gamestate = http_comms.get_latest_gamestate()
    
    if latest_gamestate is None:
        raise AssertionError("No gamestate retrieved from REAL server")
    
    # CRITICAL VALIDATION: Verify it's a REAL GameStatus Pydantic object
    if not isinstance(latest_gamestate, GameStatus):
        raise AssertionError(f"Expected REAL GameStatus object, got {type(latest_gamestate)}")
    
    # Verify REAL server data structure
    expected_players = 2
    if len(latest_gamestate.players) != expected_players:
        raise AssertionError(f"Expected {expected_players} players from REAL server, got {len(latest_gamestate.players)}")
    
    # Validate REAL dictionary structure (dict[str, PlayerStatus])
    if "player1" not in latest_gamestate.players:
        raise AssertionError("Player1 not found in REAL gamestate")
    if "player2" not in latest_gamestate.players:
        raise AssertionError("Player2 not found in REAL gamestate")
        
    # CRITICAL: Validate each player is a REAL PlayerStatus Pydantic object
    player1 = latest_gamestate.players["player1"]
    player2 = latest_gamestate.players["player2"]
    
    if not isinstance(player1, PlayerStatus):
        raise AssertionError(f"Player1 should be PlayerStatus object, got {type(player1)}")
    if not isinstance(player2, PlayerStatus):
        raise AssertionError(f"Player2 should be PlayerStatus object, got {type(player2)}")
    
    # Validate REAL server processed the data (health/ammo might have changed due to real-time updates)
    if player1.tag_id != "player1":
        raise AssertionError(f"Player1 tag_id wrong: expected 'player1', got '{player1.tag_id}'")
    if player2.tag_id != "player2":
        raise AssertionError(f"Player2 tag_id wrong: expected 'player2', got '{player2.tag_id}'")
    
    print(f"‚úÖ REAL GameStatus retrieved successfully: {len(latest_gamestate.players)} players")
    print(f"   üîÑ Client deserialized REAL GameStatus from HTTP JSON")
    print(f"   üìä Player 1: {player1.display_name} (HP: {player1.health}, Ammo: {player1.ammo}) - {type(player1).__name__}")
    print(f"   üìä Player 2: {player2.display_name} (HP: {player2.health}, Ammo: {player2.ammo}) - {type(player2).__name__}")
    print("   üéØ GAMEUPDATE PYDANTIC MODEL WORKS PERFECTLY OVER HTTP!")
    print("   ‚úÖ Server serialized GameStatus ‚Üí HTTP JSON ‚Üí Client deserialized GameStatus")
    
    print("‚úÖ REAL GameStatus HTTP test completed - NO MOCKING!")
    
    # Test Summary - REAL SERVER RESULTS
    print("\nüéâ ALL REAL SERVER TESTS PASSED - NO MOCKING!")
    print(f"üìä REAL Server Test Results:")
    print(f"   üì§ Images processed by REAL server: {len(RealGameHTTPServer.images_received)}")
    print(f"   üì® Events processed by REAL server: {len(RealGameHTTPServer.events_received)}")
    print(f"   üîÑ Pydantic models serialized/deserialized over HTTP")
    print(f"   ‚úÖ REAL HTTP communication validated")
    print(f"   ‚úÖ GameStatus Pydantic model works over HTTP")
    print(f"   ‚úÖ PlayerStatus Pydantic model works over HTTP")
    print(f"   ‚úÖ PlayerTagged Pydantic model works over HTTP")
    print(f"   ‚úÖ send_tagging_event convenience function works over HTTP")
    print(f"   ‚úÖ Dictionary structure dict[str, PlayerStatus] works")
    print(f"   ‚úÖ Connection state tracking working")
    print(f"   ‚úÖ Error handling working") 
    print(f"   üéØ CRITICAL: Pydantic models proven to work over genuine HTTP!")
    
except Exception as e:
    print(f"\nüí• TEST FAILED: {e}")
    import traceback
    traceback.print_exc()
    exit(1)

finally:
    # Cleanup
    server.shutdown()
    print("\nüßπ Test server stopped")
    print("‚ú® Tests completed!")
